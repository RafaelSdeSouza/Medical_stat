xlab("Age")
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
my_style <- function() {
font <- "Helvetica"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=22,
face="bold",
color="#222222"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=22,
margin=ggplot2::margin(9,0,9,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
axis.title  = ggplot2::element_text(family=font,
size=22,
color="#222222"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.x = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
)
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
my_style <- function() {
font <- "Helvetica"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=22,
face="bold",
color="#222222"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=22,
margin=ggplot2::margin(9,0,9,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
axis.title  = ggplot2::element_text(family=font,
size=22,
color="#222222"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.x = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
)
}
my_style <- function() {
font <- "Helvetica"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=22,
face="bold",
color="#222222"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=22,
margin=ggplot2::margin(9,0,9,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
axis.title  = ggplot2::element_text(family=font,
size=22,
color="#222222"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.x = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
)
}
}
my_style <- function() {
font <- "Helvetica"
ggplot2::theme(
#Text format:
#This sets the font, size, type and colour of text for the chart's title
plot.title = ggplot2::element_text(family=font,
size=22,
face="bold",
color="#222222"),
#This sets the font, size, type and colour of text for the chart's subtitle, as well as setting a margin between the title and the subtitle
plot.subtitle = ggplot2::element_text(family=font,
size=22,
margin=ggplot2::margin(9,0,9,0)),
plot.caption = ggplot2::element_blank(),
#This leaves the caption text element empty, because it is set elsewhere in the finalise plot function
#Legend format
#This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates.
legend.position = "top",
legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
#Axis format
#This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so.
axis.text = ggplot2::element_text(family=font,
size=18,
color="#222222"),
axis.title  = ggplot2::element_text(family=font,
size=22,
color="#222222"),
axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
#Grid lines
#This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_line(color="#cbcbcb"),
panel.grid.major.x = ggplot2::element_blank(),
#Blank background
#This sets the panel background as blank, removing the standard grey ggplot background colour from the plot
panel.background = ggplot2::element_blank(),
#Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22)
strip.background = ggplot2::element_rect(fill="white"),
strip.text = ggplot2::element_text(size  = 22,  hjust = 0)
)
}
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
source("my_style.R")
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
setwd("~/Documents/GitHub/Medical_stat")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
# Auxiliar function to randomly select a given column
crand <- function(x,seed){
if (!missing(seed))
set.seed(seed)
xr <- x[1+rbinom(1,1,0.5)]
return(xr)
}
#"PREGNANT_NUMERIC",
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
select(c("PREGNANT_NUMERIC",  "AGE", "TL_rand", "TLD_rand","TLP_rand","ANAS_rand","Fibr_rand"))
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .5,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand-1,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
HR_glm_model <- glm(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train,family=binomial(link = "logit"))
explainer_glm <- explain(HR_glm_model,Train)
explainer_xgb <- explain(HR_xgb_model,model_matrix_train)
expl_xgb <- variable_response(explainer_xgb,"AGE",
"pdp")
expl_glm <- variable_response(explainer_glm,"AGE",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
expl_xgb <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_glm <- variable_response(explainer_glm,"AGE",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("Age") +
ylab("Pregnancy probability")
expl_xgb <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_glm <- variable_response(explainer_glm,"TL_rand",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("TL_rand") +
ylab("Pregnancy probability")
HR_glm_model <- gam(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train,family=binomial(link = "logit"))
explainer_glm <- explain(HR_glm_model,Train)
explainer_xgb <- explain(HR_xgb_model,model_matrix_train)
expl_xgb <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_glm <- variable_response(explainer_glm,"TL_rand",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("TL_rand") +
ylab("Pregnancy probability")
HR_glm_model <- gam(PREGNANT_NUMERIC~s(AGE)+s(TL_rand) +
s(TLD_rand) + s(TLP_rand)  +
s(ANAS_rand) + s(Fibr_rand),Train,family=binomial(link = "logit"))
explainer_glm <- explain(HR_glm_model,Train)
explainer_xgb <- explain(HR_xgb_model,model_matrix_train)
expl_xgb <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_glm <- variable_response(explainer_glm,"TL_rand",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("TL_rand") +
ylab("Pregnancy probability")
HR_glm_model <- glm(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train,family=binomial(link = "logit"))
explainer_glm <- explain(HR_glm_model,Train)
explainer_xgb <- explain(HR_xgb_model,model_matrix_train)
expl_xgb <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_glm <- variable_response(explainer_glm,"TL_rand",
"pdp")
plot(expl_xgb,expl_glm) + my_style() +
xlab("TL_rand") +
ylab("Pregnancy probability")
expl_xgb
expl_glm
160/30
500*1.6
800/600
expl_xgb1 <- variable_response(explainer_xgb,"AGE",
"pdp")
expl_xgb2 <- variable_response(explainer_xgb,"TL_rand",
"pdp")
expl_xgb3 <- variable_response(explainer_xgb,"TLD_rand",
"pdp")
expl_xgb4 <- variable_response(explainer_xgb,"TLP_rand",
"pdp")
expl_xgb5 <- variable_response(explainer_xgb,"ANAS_rand",
"pdp")
expl_xgb6 <- variable_response(explainer_xgb,"Fibr_rand",
"pdp")
expl_xgb <- cbind(expl_xgb1,expl_xgb2,expl_xgb3,expl_xgb4,expl_xgb5,
expl_xgb6)
expl_xgb <- rbind(expl_xgb1,expl_xgb2,expl_xgb3,expl_xgb4,expl_xgb5,
expl_xgb6)
head(expl_xgb)
ggplot(expl_xgb,aes(x=x,y=y,group=label))+
facet_wrap(.~var)
ggplot(expl_xgb,aes(x=x,y=y,group=label)) +
geom_line() +
facet_wrap(.~var)
ggplot(expl_xgb,aes(x=x,y=y,group=label)) +
geom_line() +
facet_wrap(.~var,scales="free")
ggplot(expl_xgb,aes(x=x,y=y,group=label)) +
geom_line() + geom_point() +
facet_wrap(.~var,scales="free") + my_style()
ggplot(expl_xgb,aes(x=x,y=y,group=label)) +
geom_line() + geom_point() + scale_color_viridis_d() +
facet_wrap(.~var,scales="free") + my_style()
explainer_glm <- explain(HR_glm_model,Train)
expl_glm1 <- variable_response(explainer_glm,"AGE",
"pdp")
expl_glm2 <- variable_response(explainer_glm,"TL_rand",
"pdp")
expl_glm3 <- variable_response(explainer_glm,"TLD_rand",
"pdp")
expl_glm4 <- variable_response(explainer_glm,"TLP_rand",
"pdp")
expl_glm5 <- variable_response(explainer_glm,"ANAS_rand",
"pdp")
expl_glm6 <- variable_response(explainer_glm,"Fibr_rand",
"pdp")
expl_glm <- rbind(expl_glm1,expl_glm2,expl_glm3,expl_glm4,expl_glm5,
expl_glm6)
expl <- rbind(expl_glm,expl_xgb)
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() +
facet_wrap(.~var,scales="free") + my_style()
require(ggthemes)
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style()
expl <- rbind(expl_glm,expl_xgb) %>%
rename(c("TL_rand" = "Tube Lenght"))
expl
expl <- rbind(expl_glm,expl_xgb) %>%
rename(c(TL_rand = "Tube Lenght"))
expl
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(., var = fct_recode(var, "TL_rand" = "Tube Length"))
require(forcats)
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(., var = fct_recode(var, "TL_rand" = "Tube Length"))
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(var = fct_recode(var, "TL_rand" = "Tube Length"))
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(var = recode(var, TL_rand = "Tube Length"))
expl
colnames(preg)
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(var = recode(var, TL_rand = "Tube length",
TLD_rand = "Tube length distal",
TLP_rand = "Tube length prox",
ANAS_rand = "ANASTOMOSIS",
Fibr_rand = "FIBROSIS"))
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style()
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style() +
ylab("Pregnancy probability") + xlab("")
pdf("partial_dep.pdf",height = 10,width = 15)
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style() +
ylab("Pregnancy probability") + xlab("")
dev.off()
pdf("partial_dep.pdf",height = 7,width = 10)
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style() +
ylab("Pregnancy probability") + xlab("")
dev.off()
xpl
expl
expl <- rbind(expl_glm,expl_xgb) %>%
mutate(var = recode(var, TL_rand = "Tube length",
TLD_rand = "Tube length distal",
TLP_rand = "Tube length prox",
ANAS_rand = "ANASTOMOSIS",
Fibr_rand = "FIBROSIS")) %>%
mutate(label = recode(label, lm = "glm",
xgb.Booster = "xgb"))
pdf("partial_dep.pdf",height = 7,width = 10)
ggplot(expl,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() + scale_colour_tableau()+
facet_wrap(.~var,scales="free") + my_style() +
ylab("Pregnancy probability") + xlab("")
dev.off()
vd_xgb <- variable_importance(explainer_xgb,type="raw")
plot(vd_xgb)
explainer_xgb <- explain(HR_xgb_model,model_matrix_train,y=Train$PREGNANT_NUMERIC
)
vd_xgb <- variable_importance(explainer_xgb,type="raw")
plot(vd_xgb)
vd_xgb <- variable_importance(explainer_xgb,type="ratio")
plot(vd_xgb)
vd_xgb <- variable_importance(explainer_xgb,type="difference")
plot(vd_xgb)
pred_xgb <- prediction_breakdown(explainer_xgb,observation = Test)
model_matrix_test <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand-1,Test)
data_test <- xgb.DMatrix(model_matrix_test,
label = Train$PREGNANT_NUMERIC)
pred_xgb <- prediction_breakdown(explainer_xgb,observation = data_test )
explainer_xgb <- explain(HR_xgb_model,model_matrix_train,
y=Train$PREGNANT_NUMERIC,
label="modelxgb")
pred_xgb <- prediction_breakdown(explainer_xgb,observation = data_test )
data_test <- xgb.DMatrix(model_matrix_test,
label = Test$PREGNANT_NUMERIC)
pred_xgb <- prediction_breakdown(explainer_xgb,observation = data_test)
data_test <- xgb.DMatrix(model_matrix_test,
label = Test$PREGNANT_NUMERIC)
data_test
model_matrix_test
data_test
prediction_breakdown(explainer_xgb,observation = data_test)
explainer_xgb
explainer_xgb <- explain(HR_xgb_model,model_matrix_train,
y=Train$PREGNANT_NUMERIC,
label="modelxgb")
explainer_xgb
prediction_breakdown(explainer_xgb,observation = data_test)
nobs <- model_matrix_train[1, , drop = FALSE]
pred_xgb <- prediction_breakdown(explainer_xgb,observation = nobs)
prediction_breakdown(explainer_xgb,observation = nobs)
pred_xgb <- prediction_breakdown(explainer_xgb,observation = nobs)
plot(pred_xgb )
