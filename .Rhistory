library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
require(directlabels)
# Auxiliar function to randomly select a given column
# Data-processing
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- preg[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("PREGNANT_NUMERIC",
#"LIGATION_GROUP",
"AGE", "TL_rand", "ANAS_rand","Fibr_rand",
"Diam_rand"))
# Split train vs test sample
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .7,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- preg2[-trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
#cor(Train[,3:8], use="complete.obs", method="kendall")
# Train the models: GLM, GAM, RF
classif_gam <- gam(PREGNANT_NUMERIC~
#LIGATION_GROUP
s(AGE,bs="cr",k=12)+s(TL_rand,bs="cr",k=12) +  ANAS_rand + Fibr_rand + Diam_rand, data = Train,
family=binomial(link = "logit"))
classif_rf <-  randomForest(PREGNANT_NUMERIC~1+
#LIGATION_GROUP+
AGE+
TL_rand +
ANAS_rand + Fibr_rand + Diam_rand,
data = Train, ntree=2000,nodesize=50)
p_rf <- function(object, newdata){predict(object, newdata=newdata, type="prob")[,2]}
p_gam  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_gam  <- explain(classif_gam, label = "GAM",
data = Test[,-1], y = yTest,
predict_function = p_gam)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
ale_gam_age  <- variable_response(explain_gam , variable =  "AGE", type = "pdp")
ale_rf_age   <- variable_response(explain_rf, variable =  "AGE", type = "pdp")
ale_age_all <- rbind(ale_gam_age,ale_rf_age)
gg <- ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25)  +  my_style() +
scale_color_wsj() + ylab("Pregnancy likelihood") +
scale_fill_wsj() +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(19.5,49),ylim=c(0,1))
direct.label(gg,"lasso.labels")
gg <- ggplot(ale_gam_all_age,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,1))
direct.label(gg,"angled.endpoints")
ale_all_age
ale_gam_all_age
ale_all_age <- rbind(ale_rf1_age,ale_rf2_age,ale_rf3_age,ale_rf4_age ) %>%
mutate(method = "RF")
ale_gam_all_age <- rbind(ale_gam1_age,ale_gam2_age,ale_gam3_age,ale_gam4_age ) %>%
mutate(method = "GAM")
ale_all <- rbind(ale_all_age,ale_gam_all_age )
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label,linetype=method)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,1))
direct.label(g,"angled.endpoints")
ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,1)) +
facet_wrap(.~method)
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,1)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,0.8)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
pdf("ale_age_outcome.pdf",height = 5,width = 12)
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,0.8)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
dev.off()
# AGE
ale_rf1_age   <- variable_response(explain_rf_1, variable =  "AGE", type = "ale")
ale_rf2_age   <- variable_response(explain_rf_2, variable =  "AGE", type = "ale")
ale_rf3_age   <- variable_response(explain_rf_3, variable =  "AGE", type = "ale")
ale_rf4_age   <- variable_response(explain_rf_4, variable =  "AGE", type = "ale")
ale_all_age <- rbind(ale_rf1_age,ale_rf2_age,ale_rf3_age,ale_rf4_age ) %>%
mutate(method = "RF")
ale_gam1_age   <- variable_response(explain_gam_1, variable =  "AGE", type = "ale")
ale_gam2_age   <- variable_response(explain_gam_2, variable =  "AGE", type = "ale")
ale_gam3_age   <- variable_response(explain_gam_3, variable =  "AGE", type = "ale")
ale_gam4_age   <- variable_response(explain_gam_4, variable =  "AGE", type = "ale")
ale_gam_all_age <- rbind(ale_gam1_age,ale_gam2_age,ale_gam3_age,ale_gam4_age ) %>%
mutate(method = "GAM")
ale_all <- rbind(ale_all_age,ale_gam_all_age )
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
coord_cartesian(xlim=c(21,50),ylim=c(0,0.8)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)")
#+
#  coord_cartesian(xlim=c(21,50),ylim=c(0,0.8)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
g <- ggplot(ale_all,aes(x=x,y=y,group=label,color=label,fill=label)) +
geom_smooth(method = 'loess',span=0.25) +
#+ geom_point() +
my_style() +
scale_linetype_stata(name="") +
scale_color_wsj(name="") + ylab("Outcome likelihood") +
scale_fill_wsj(name = "") +
xlab("AGE (yr)") +
#+
#  coord_cartesian(xlim=c(21,50),ylim=c(0,0.8)) +
facet_wrap(.~method)
direct.label(g,"angled.endpoints")
mp_gam_1 <- model_performance(explain_gam_1)
mp_gam_2 <- model_performance(explain_gam_2)
mp_gam_3 <- model_performance(explain_gam_3)
mp_gam_4 <- model_performance(explain_gam_4)
plot(mmp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4)
mp_gam_1 <- model_performance(explain_gam_1)
mp_gam_2 <- model_performance(explain_gam_2)
mp_gam_3 <- model_performance(explain_gam_3)
mp_gam_4 <- model_performance(explain_gam_4)
plot(mmp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4)
plot(mp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4)
plot(mp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4,geom = "boxplot")
mp_rf_1 <- model_performance(explain_rf_1)
mp_rf_2 <- model_performance(explain_rf_2)
mp_rf_3 <- model_performance(explain_rf_3)
mp_rf_4 <- model_performance(explain_rf_4)
plot(mp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4,
mp_rf_1,mp_rf_2,mp_rf_3,mp_rf_4,
geom = "boxplot")
mp_rf_1
rbind(mp_rf_1,mp_rf_2)
mp_rf_all <- rbind(mp_rf_1,mp_rf_2,mp_rf_3,mp_rf_4) %>%
mutate(method="RF")
mp_gam_1 <- model_performance(explain_gam_1) %>% as.data.frame()
mp_gam_2 <- model_performance(explain_gam_2) %>% as.data.frame()
mp_gam_3 <- model_performance(explain_gam_3) %>% as.data.frame()
mp_gam_4 <- model_performance(explain_gam_4) %>% as.data.frame()
mp_gam_all <- rbind(mp_gam_1,mp_gam_2,mp_gam_3,mmp_gam_4) %>%
mutate(method="GAM")
mp_multi_all <- rbind(mp_rf_all,mp_gam_all)
mp_gam_all <- rbind(mp_gam_1,mp_gam_2,mp_gam_3,mp_gam_4) %>%
mutate(method="GAM")
mp_multi_all <- rbind(mp_rf_all,mp_gam_all)
ggplot(mp_multi_all ,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|") +
facet_wrap(.~method)
ggplot(mp_multi_all ,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
data(aSAH)
# Basic example
multiclass.roc(aSAH$gos6, aSAH$s100b)
aSAH$gos6
aSAH$s100b
ggplot(mp_multi_all ,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_ecdf() +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
ggplot(mp_multi_all ,aes(x=label,y=abs(diff),group=label,
fill=label)) +
stat_ecdf() +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
mp_multi_all
ggplot(mp_multi_all ,aes(x=abs(diff),group=label,
fill=label)) +
stat_ecdf() +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
ggplot(mp_multi_all,aes(x=abs(diff),group=label,
color=label)) +
stat_ecdf() +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
ggplot(mp_multi_all,aes(x=abs(diff),group=label,
color=label)) +
stat_ecdf(geom = "step") +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
mp_multi_all
mp_multi_all <- rbind(mp_rf_all,mp_gam_all) %>% mutate(diff = abs(diff))
ggplot(mp_multi_all,aes(x=diff,group=label,
color=label)) +
stat_ecdf(geom = "step") +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
ggplot(mp_multi_all,aes(x=diff,group=label,
color=label)) +
stat_ecdf(geom = "step",pad=FALSE) +
my_style() +
coord_flip()+
scale_color_wsj() + ylab("ECDF") +
scale_fill_wsj() +
xlab("|Residuals|") +
facet_wrap(.~method)
range(mp_multi_all$diff)
explain_rf_1
model_performance(explain_rf_1)
explain_gam_1
as.data.frame(explain_gam_1)
explain_gam_1$class
explain_gam_1$data
predict(classif_rf)
predict(classif_gam)
predict(classif_gam,type="response")
predict(classif_gam,type="probability")
predict(classif_gam,type="prob")
predict(classif_gam,type="response")
predict(classif_gam,Test[,-1],type="response")
setwd("~/Documents/GitHub/Medical_stat")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(caret)
library(pROC)
require(reshape)
require(randomForest)
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
# Auxiliar function to randomly select a given column
outcomes <- read.csv("BTA-Pregnancies-anonymized.csv") %>% select(c("OutcomeGpNumeric",  "AGE",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(outcomes),1,0.5) + 1
temp1 <- outcomes[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- outcomes[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- outcomes[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- outcomes[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- outcomes[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- outcomes[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(outcomes)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
outcomes2 <- outcomes %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(OutcomeGpNumeric = as.factor(OutcomeGpNumeric)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("OutcomeGpNumeric",
"AGE", "TL_rand","ANAS_rand","Fibr_rand",
"Diam_rand"))
# Split train vs test sample
trainIndex <- createDataPartition(outcomes2$OutcomeGpNumeric, p = .7,
list = FALSE,
times = 1)
Train <- outcomes2[trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- outcomes2[-trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
classif_rf <-  randomForest(OutcomeGpNumeric~ 1+
AGE+
TL_rand +
ANAS_rand + Fibr_rand + Diam_rand,
data = Train, ntree=2000,nodesize=50)
classif_gam <- vgam(OutcomeGpNumeric~
s(AGE,bs="cr",k=12)+
s(TL_rand,bs="cr",k=12) +
ANAS_rand + Fibr_rand + Diam_rand,multinomial, data = Train)
#1=birth
#2=ongoing
#3=miscarriage
#4=ectopic
pred1 <- function(m, x)   predict(m, x, type = "prob")[,1]
pred2 <- function(m, x)   predict(m, x, type = "prob")[,2]
pred3 <- function(m, x)   predict(m, x, type = "prob")[,3]
pred4 <- function(m, x)   predict(m, x, type = "prob")[,4]
explain_rf_1 <- explain(classif_rf, data = Test[,-1],
y = Test$OutcomeGpNumeric == "1",
predict_function = pred1, label = "Birth")
explain_rf_2 <- explain(classif_rf, data = Test[,-1],
y = Test$OutcomeGpNumeric == "2",
predict_function = pred2, label = "Ongoing")
explain_rf_3 <- explain(classif_rf, data = Test[,-1],
y = Test$OutcomeGpNumeric == "3",
predict_function = pred3, label = "Miscarriage")
explain_rf_4 <- explain(classif_rf, data = Test[,-1],
y = Test$OutcomeGpNumeric == "4",
predict_function = pred4, label = "Ectopic")
classif_rf
classif_gam
predict(classif_gam)
predict(classif_gam,type="response")
classif_gam <- vgam(OutcomeGpNumeric~
s(AGE,bs="cr",k=12)+
s(TL_rand,bs="cr",k=12) +
ANAS_rand + Fibr_rand + Diam_rand,multinomial, propodds,data = Train)
classif_gam <- vgam(OutcomeGpNumeric~
s(AGE,bs="cr",k=12)+
s(TL_rand,bs="cr",k=12) +
ANAS_rand + Fibr_rand + Diam_rand,multinomial, data = Train)
predict(classif_gam,type="response")
DF <- predict(classif_gam,type="response")
colnames(DF)[max.col(DF,ties.method="first")]
as.numeric(colnames(DF)[max.col(DF,ties.method="first")])
DF <- predict(classif_gam,Test[,-1],type="response")
as.numeric(colnames(DF)[max.col(DF,ties.method="first")])
cf_gam <- as.numeric(colnames(DF)[max.col(DF,ties.method="first")])
table(cf_gam,Test[,1])
table(cf_gam)
table(cf_gam,Test[,1])
max.col(DF)
as.numeric(colnames(DF)[max.col(DF)])
table(as.numeric(colnames(DF)[max.col(DF)]))
classif_gam
classif_gam <- vgam(OutcomeGpNumeric~
s(AGE,bs="cr",k=10)+
s(TL_rand,bs="cr",k=10) +
ANAS_rand + Fibr_rand + Diam_rand,multinomial, data = Train)
DF <- predict(classif_gam,Test[,-1],type="response")
cf_gam <- as.numeric(colnames(DF)[max.col(DF)])
table(cf_gam,Test[,1])
predict(classif_rf )
DF <- predict(classif_gam,type="response")
cf_gam <- as.numeric(colnames(DF)[max.col(DF)])
table(cf_gam,Train[,1])
yhat(classif_rf)
loss_cross_entropy(Train[,1], yhat(classif_rf))
yhat(classif_gam)
yhat(classif_rf)
predict(classif_gam,type="response")
loss_cross_entropy(Train[,1],  predict(classif_gam,type="response"))
loss_cross_entropy(Train[,1],  predict(classif_gam,type="response"))
loss_cross_entropy(Train[,1], yhat(classif_rf))
setwd("~/Documents/GitHub/Medical_stat")
277+177+24
