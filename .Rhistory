model = textConnection(NORM_err),
n.chains = 3,
n.iter = 5000,
n.thin = 1,
n.burnin = 2500)
print(evfit,intervals=c(0.025, 0.975), digits=3)
setwd("~/")
erry
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
dataTableOutput('table'),
verbatimTextOutput('hoverIndex')
),
server = function(server, input, output) {
output$hoverIndex <- renderText({
paste("hover column info", input$hoverIndexJS)
})
output$table <- renderDataTable({
datatable(data.frame(`A` = 1:5, `B` = 11:15, `C` = LETTERS[1:5]),
rownames = F,
callback = JS("
table.on('mouseenter', 'td', function() {
Shiny.onInputChange('hoverIndexJS', this.innerHTML);
});
return table;
")
)
})
}
)
175/8
175*4
library("TDA", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Diag <- matrix(c(0, 0, 10, 1, 0, 3, 1, 3, 8), ncol = 3, byrow = TRUE)
DiagLim <- 10
colnames(Diag) <- c("dimension", "Birth", "Death")
#persistence landscape
tseq <- seq(0,DiagLim, length = 1000)
Land <- landscape(Diag, dimension = 1, KK = 1, tseq)
par(mfrow = c(1,2))
plot.diagram(Diag)
plot(tseq, Land, type = "l", xlab = "t", ylab = "landscape", asp = 1)
library(dplyr)
library(tidyr)
library(DT)
library(sparkline)
dat <- readRDS("data.rds")
datatable(dat, rownames = FALSE)
dat <- iris3
datatable(dat, rownames = FALSE)
dat <- iris
datatable(dat, rownames = FALSE)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
d1 <- datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
js <- "function(data, type, full){ return '<span class=spark>' + data + '</span>' }"
colDefs1 <- list(list(targets = c(1:3), render = JS(js)))
d1 <- datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
range(filter(dat, Var == "Species")$Val)
dat
r <- range(filter(dat, Species == "setosa")$Val)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
r <- range(filter(dat, Species == "setosa")$Val)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
range(filter(dat, Species == "setosa")$Val)
filter(dat, Species == "setosa")
range(dat$Petal.Length)
r <- range(dat$Petal.Length)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
datatable(dat, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
r <- range(dat$Petal.Length)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
d1 <- datatable(dat, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
d1
4*12000
4200*12
80000/12
400000/12
300000/12
40000/12
3512-79.98
3432.02-50
9200+3300
12500+500
13000+1700
14700*3.7
54390+45000
4000000/12
333333.3 + 2550000
6000000/12
2883333+50000
34000/12
2550000 + 500000
2883333+500000
271431.74/12
495000/12
81545/12
550000/12
450000/12
29221+7500
450000/12
7500 + 450000/12
7500*12 + 450000
7500*12 + 495000
7500*12 + 500000
29221+7500
7500*12
495000 + 90000
450000/12
37500 + 7500
29221 + 7500
550000/12
35200+7500
7500*12
29221*12
7500*12
44+12
44+13
57/12
4.75*3.7
100000/12
40/2500
450000 + 10000 + 90000
550000/12
55000 + 90000 + 10000
550000 + 90000 + 10000
650000/12
45833.33*0.55
16500*10+50000
19000*12
13700*10+19000+32000
188000/12
15666.67/3.6
3400*3.6
80520,10/12
90520.10/12
7543.342*3.75
309000/12
550000/12
640000/12
install.packages("DALEX")
setwd("~/Documents/GitHub/Medical_stat")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
setwd("~/Documents/GitHub/Medical_stat")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
# Auxiliar function to randomly select a given column
crand <- function(x,seed){
if (!missing(seed))
set.seed(seed)
xr <- x[1+rbinom(1,1,0.5)]
return(xr)
}
#"PREGNANT_NUMERIC",
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("BECOME_PREGNANT",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(BECOME_PREGNANT %in% c("Yes","No")) %>% droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand)
trainIndex <- createDataPartition(preg$BECOME_PREGNANT, p = .5,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(BECOME_PREGNANT~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$BECOME_PREGNANT)
param <- list(max_depth=2,objective="binary:logisti")
HR_xgb_model <- xgb.train(param,Train,nrounds=50)
HR_glm_model <- glm(BECOME_PREGNANT~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
#GLM model
explainer_glm <- explain(HR_glm_model,Train)
explainer_xgb <- explain(HR_xgb_model,Train)
expl_glm <- variable_response(explainer_glm,"BECOME_PREGNANT",
"pdp")
expl_xgb <- variable_response(explainer_xgb,"BECOME_PREGNANT",
"pdp")
HR_xgb_model
xgb.train(param,Train,nrounds=50)
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(BECOME_PREGNANT %in% c("Yes","No")) %>% droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand)
trainIndex <- createDataPartition(preg$PREGNANT_NUMERIC, p = .5,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
HR_glm_model <- glm(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
HR_xgb_model
xgb.train(param,data_train,nrounds=50)
data_train
Train$PREGNANT_NUMERIC
Train
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .5,
list = FALSE,
times = 1)
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(BECOME_PREGNANT %in% c("Yes","No")) %>% droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>% droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand)
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .5,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
preg2$PREGNANT_NUMERIC
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
Train$PREGNANT_NUMERIC
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
data_train
xgb.train(param,data_train,nrounds=50)
model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
model.matrix(left~.-1,Train)
model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
Train$PREGNANT_NUMERIC
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
xgb.train(param,data_train,nrounds=50)
data_train
data_train[1,]
data_train
data_train[[1]]
xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
Train$PREGNANT_NUMERIC
data_train <- xgb.DMatrix(model_matrix_train,
label = as.numeric(Train$PREGNANT_NUMERIC))
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(PREGNANT_NUMERIC))
droplevels()
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand)
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .5,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
model_matrix_train <- model.matrix(PREGNANT_NUMERIC~AGE+TL_rand +
TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,Train)
data_train <- xgb.DMatrix(model_matrix_train,
label = Train$PREGNANT_NUMERIC)
param <- list(max_depth=2,objective="binary:logistic")
HR_xgb_model <- xgb.train(param,data_train,nrounds=50)
data_train
