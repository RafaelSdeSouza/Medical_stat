temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
select(c("PREGNANT_NUMERIC","LIGATION_GROUP", "AGE", "TL_rand", "TLD_rand","TLP_rand","ANAS_rand","Fibr_rand"))
# Split train vs test sample
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .9,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
Test  <- preg2[-trainIndex,]
#cor(Train[,3:8], use="complete.obs", method="kendall")
# Train the models: GLM, GAM, RF
classif_glm <- glm(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand + TLD_rand +
TLP_rand  + ANAS_rand + Fibr_rand, data = Train,
family=binomial(link = "logit"))
classif_svm <- ksvm(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="rbfdot",type="C-bsvc",prob.model = TRUE)
classif_rf <-  randomForest(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand +
TLD_rand + TLP_rand  + ANAS_rand + Fibr_rand,
data = Train, ntree=2500)
p_rf <- function(object, newdata){predict(object, newdata=newdata, type="prob")[,2]}
p_glm  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_svm  <- explain(classif_svm, label = "SVM",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
# Model Performance
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_svm  <- model_performance(explain_svm) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
pdf("performance.pdf",height = 4,width = 5)
ggplot(mp_all,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|")
dev.off()
#  Acumulated Local Effects plot
classif_svm <- ksvm(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="rbfdot",type="C-bsvc",prob.model = TRUE)
classif_rf <-  randomForest(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand +
TLD_rand + TLP_rand  + ANAS_rand + Fibr_rand,
data = Train, ntree=2500)
p_rf <- function(object, newdata){predict(object, newdata=newdata, type="prob")[,2]}
p_glm  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_svm  <- explain(classif_svm, label = "SVM",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
# Model Performance
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_svm  <- model_performance(explain_svm) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
ggplot(mp_all,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|")
ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,linetype=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
ale_glm_age  <- variable_response(explain_glm , variable =  "AGE", type = "pdp")
ale_svm_age  <- variable_response(explain_svm, variable =  "AGE", type = "pdp")
ale_rf_age   <- variable_response(explain_rf, variable =  "AGE", type = "pdp")
ale_age_all <- rbind(ale_glm_age ,ale_svm_age,ale_rf_age  )
ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,linetype=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
classif_svm <- ksvm(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="rbfdot",kpar=list(sigma=0.1),type="nu-svc",prob.model = TRUE)
classif_svm <- ksvm(PREGNANT_NUMERIC~AGE+LIGATION_GROUP+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="splinedot",type="nu-svc",prob.model = TRUE)
explain_svm  <- explain(classif_svm, label = "SVM",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_svm  <- model_performance(explain_svm) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
classif_svm
explain_svm
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_svm  <- model_performance(explain_svm) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
model_performance(explain_svm)
explain_svm
classif_svm
predict(classif_svm)
predict(classif_svm,type="prob")
predict(classif_svm,Test[,-1],type="prob")
predict(classif_svm,newdata=Test[,-1],type="prob")
Test[,-1]
classif_glm <- glm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand +
TLP_rand  + ANAS_rand + Fibr_rand, data = Train,
family=binomial(link = "logit"))
classif_svm <- ksvm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="splinedot",type="nu-svc",prob.model = TRUE)
classif_rf <-  randomForest(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand +
TLD_rand + TLP_rand  + ANAS_rand + Fibr_rand,
data = Train, ntree=2500)
p_rf <- function(object, newdata){predict(object, newdata=newdata, type="prob")[,2]}
p_glm  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_svm  <- explain(classif_svm, label = "SVM",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
# Model Performance
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_svm  <- model_performance(explain_svm) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
predict(classif_svm,newdata=Test[,-1],type="probabilities")
predict(classif_svm,type="probabilities")
classif_svm <- ksvm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="splinedot",type=" C-svc",prob.model = TRUE)
classif_svm <- ksvm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="splinedot",type="C-svc",prob.model = TRUE)
classif_knn <- knn(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,prob = TRUE)
require(class)
classif_knn <- knn(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,prob = TRUE)
require(neuralnet)
classif_ann <- neuralne(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden=5,linear.output = F)
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden=5,linear.output = F)
Train
neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden=3,linear.output = F)
neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = as.data.frame(Train),hidden=3,linear.output = F)
Train$LIGATION_GROUP
as.numeric(Train$LIGATION_GROUP)
Train <- preg2[trainIndex,] %>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- preg2[-trainIndex,]  %>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
classif_glm <- glm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand +
TLP_rand  + ANAS_rand + Fibr_rand, data = Train,
family=binomial(link = "logit"))
classif_svm <- ksvm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
kernel="splinedot",type="C-svc",prob.model = TRUE)
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden=3,linear.output = F)
predict(classif_ann)
predict(classif_ann,Test[,-1])
explain_ann  <- explain(classif_svm, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_ann  <- explain(classif_svm, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_svm,mp_rf)
mp_all <- rbind(mp_glm,mp_ann,mp_rf)
model_performance(explain_ann) %>% as.data.frame()
classif_rf <-  randomForest(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand +
TLD_rand + TLP_rand  + ANAS_rand + Fibr_rand,
data = Train, ntree=2500)
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_ann  <- explain(classif_svm, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_ann,mp_rf)
model_performance(explain_ann)
explain_ann  <- explain(classif_ann, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_ann
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_ann,mp_rf)
gplot(mp_all,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|")
ggplot(mp_all,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|")
ale_glm_age  <- variable_response(explain_glm , variable =  "AGE", type = "pdp")
ale_ann_age  <- variable_response(explain_ann, variable =  "AGE", type = "pdp")
ale_rf_age   <- variable_response(explain_rf, variable =  "AGE", type = "pdp")
ale_age_all <- rbind(ale_glm_age ,ale_ann_age,ale_rf_age  )
ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,linetype=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
# Variable Importance
lfu = function(y, p){
sum(
-(y*log(p) + (1-y)*log(1-p))
)
}
lfu()
log(1-p_rf(classif_rf))
lfu(as.numeric(as.character(Train$PREGNANT_NUMERIC)),p_rf(classif_rf))
vi_glm <- variable_importance(explain_glm,  n_sample = -1,loss_function = lfu,type = "difference")
vi_ann <- variable_importance(explain_ann,  n_sample = -1,loss_function = lfu,type = "difference")
vi_rf <- variable_importance(explain_rf,n_sample = -1,loss_function = lfu,type = "difference")
`%not_in%` <- purrr::negate(`%in%`)
vi_all <- rbind(vi_glm,vi_ann,vi_rf) %>%
mutate(dropout_loss = abs(dropout_loss)) %>%
mutate(variable = recode(variable, TL_rand = "Tube length",
TLD_rand = "Tube length distal",
TLP_rand = "Tube length prox",
ANAS_rand = "ANASTOMOSIS",
Fibr_rand = "FIBROSIS"))  %>%
filter(variable %not_in% c("_baseline_","_full_model_"))
ggplot(vi_all,aes(x=variable,y=dropout_loss,fill = label)) +
coord_flip() +
geom_bar(stat="identity") +
scale_fill_fivethirtyeight() +
my_style() +
facet_wrap(.~label)
ggplot(vi_all,aes(x=variable,y=dropout_loss,fill = label)) +
coord_flip() +
geom_bar(stat="identity") +
scale_fill_fivethirtyeight() +
my_style() +
facet_wrap(.~label,scale="free_x")
ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,linetype=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden=5,linear.output = F)
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden = c(3, 3),linear.output = F)
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden = 3,linear.output = F)
setwd("~/Documents/GitHub/Medical_stat")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
# Auxiliar function to randomly select a given column
# Data-processing
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
select(c("PREGNANT_NUMERIC","LIGATION_GROUP", "AGE", "TL_rand", "TLD_rand","TLP_rand","ANAS_rand","Fibr_rand"))
# Split train vs test sample
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .9,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,] %>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- preg2[-trainIndex,]  %>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
#cor(Train[,3:8], use="complete.obs", method="kendall")
# Train the models: GLM, GAM, RF
classif_glm <- glm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand +
TLP_rand  + ANAS_rand + Fibr_rand, data = Train,
family=binomial(link = "logit"))
#classif_svm <- ksvm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
#                    ANAS_rand + Fibr_rand,data = Train,
#                   kernel="splinedot",type="C-svc",prob.model = TRUE)
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden = 3,linear.output = F)
classif_rf <-  randomForest(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand +
TLD_rand + TLP_rand  + ANAS_rand + Fibr_rand,
data = Train, ntree=2500)
p_rf <- function(object, newdata){predict(object, newdata=newdata, type="prob")[,2]}
p_glm  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_glm  <- explain(classif_glm, label = "GLM",
data = Test[,-1], y = yTest,
predict_function = p_glm)
explain_ann  <- explain(classif_ann, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
explain_rf <- explain(classif_rf, label = "RF",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_glm <- model_performance(explain_glm) %>% as.data.frame()
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
mp_rf <- model_performance(explain_rf) %>% as.data.frame()
mp_all <- rbind(mp_glm,mp_ann,mp_rf)
ggplot(mp_all,aes(x=label,y=abs(diff),group=label,
fill=label)) +
geom_boxplot() +
my_style() +
coord_flip()+
scale_color_fivethirtyeight() + ylab("ECDF") +
scale_fill_fivethirtyeight() +
xlab("|Residuals|")
ale_glm_age  <- variable_response(explain_glm , variable =  "AGE", type = "pdp")
ale_ann_age  <- variable_response(explain_ann, variable =  "AGE", type = "pdp")
ale_rf_age   <- variable_response(explain_rf, variable =  "AGE", type = "pdp")
ale_age_all <- rbind(ale_glm_age ,ale_ann_age,ale_rf_age  )
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
ggplot(ale_age_all,aes( x = x, y = y, group=label,color=label,linetype=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() + ylab("Pregnancy likelihood") +
scale_fill_fivethirtyeight() +
xlab("AGE (yr)")
ale_glm_TL1  <- variable_response(explain_glm , variable =  "TL_rand", type = "pdp")
ale_glm_TL2   <- variable_response(explain_glm , variable =  "TLD_rand", type = "pdp")
ale_glm_TL3  <- variable_response(explain_glm , variable =  "TLP_rand", type = "pdp")
ale_ann_TL1   <- variable_response(explain_ann, variable =  "TL_rand", type = "pdp")
ale_ann_TL2   <- variable_response(explain_ann, variable =  "TLD_rand", type = "pdp")
ale_ann_TL3  <- variable_response(explain_ann, variable =  "TLP_rand", type = "pdp")
ale_rf_TL1   <- variable_response(explain_rf, variable =  "TL_rand", type = "pdp")
ale_rf_TL2   <- variable_response(explain_rf, variable =  "TLD_rand", type = "pdp")
ale_rf_TL3   <- variable_response(explain_rf, variable =  "TLP_rand", type = "pdp")
ale_TL_all <- rbind(ale_glm_TL1,ale_glm_TL2,ale_glm_TL3,
ale_ann_TL1,ale_ann_TL2,ale_ann_TL3,
ale_rf_TL1,ale_rf_TL2,ale_rf_TL3 ) %>%
mutate(var = recode(var, TL_rand = "Tube length",
TLD_rand = "Tube length distal",
TLP_rand = "Tube length prox"))
ggplot(ale_TL_all,aes(x=x,y=y,group=label,color=label)) +
geom_line() + geom_point() +  my_style() +
scale_color_fivethirtyeight() +
facet_wrap(.~var) + my_style() +
ylab("Pregnancy likelihood") + xlab("Length (cm)") +
coord_cartesian(xlim=c(0,11.9))
lfu = function(y, p){
sum(
-(y*log(p) + (1-y)*log(1-p))
)
}
lfu()
log(1-p_rf(classif_rf))
lfu(as.numeric(as.character(Train$PREGNANT_NUMERIC)),p_rf(classif_rf))
vi_glm <- variable_importance(explain_glm,  n_sample = -1,loss_function = lfu,type = "difference")
vi_ann <- variable_importance(explain_ann,  n_sample = -1,loss_function = lfu,type = "difference")
vi_rf <- variable_importance(explain_rf,n_sample = -1,loss_function = lfu,type = "difference")
`%not_in%` <- purrr::negate(`%in%`)
vi_all <- rbind(vi_glm,vi_ann,vi_rf) %>%
mutate(dropout_loss = abs(dropout_loss)) %>%
mutate(variable = recode(variable, TL_rand = "Tube length",
TLD_rand = "Tube length distal",
TLP_rand = "Tube length prox",
ANAS_rand = "ANASTOMOSIS",
Fibr_rand = "FIBROSIS"))  %>%
filter(variable %not_in% c("_baseline_","_full_model_"))
ggplot(vi_all,aes(x=variable,y=dropout_loss,fill = label)) +
coord_flip() +
geom_bar(stat="identity") +
scale_fill_fivethirtyeight() +
my_style() +
facet_wrap(.~label,scale="free_x")
classif_ann <- neuralnet(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,hidden = c(3,3),linear.output = F)
classif_ann
explain_ann  <- explain(classif_ann, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
explain_ann
explain_ann  <- explain(classif_ann, label = "ANN",
data = Test[,-1], y = yTest,
predict_function = p_rf)
mp_ann  <- model_performance(explain_ann) %>% as.data.frame()
require(gbm)
classif_gbm <- gbm(REGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
distribution = "bernoulli", n.trees = 500, shrinkage = 0.1)
classif_gbm <- gbm(PREGNANT_NUMERIC~LIGATION_GROUP+AGE+TL_rand + TLD_rand + TLP_rand  +
ANAS_rand + Fibr_rand,data = Train,
distribution = "bernoulli", n.trees = 500, shrinkage = 0.1)
classif_gbm
pred(classif_gbm)
predict(classif_gbm)
predict(classif_gbm,n.trees = best.iter, type = "link")
best.iter <- gbm.perf(classif_gbm , method = "test")
best.iter <- gbm.perf(classif_gbm , method = "OOB")
