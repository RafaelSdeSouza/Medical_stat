175/8
175*4
library("TDA", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
Diag <- matrix(c(0, 0, 10, 1, 0, 3, 1, 3, 8), ncol = 3, byrow = TRUE)
DiagLim <- 10
colnames(Diag) <- c("dimension", "Birth", "Death")
#persistence landscape
tseq <- seq(0,DiagLim, length = 1000)
Land <- landscape(Diag, dimension = 1, KK = 1, tseq)
par(mfrow = c(1,2))
plot.diagram(Diag)
plot(tseq, Land, type = "l", xlab = "t", ylab = "landscape", asp = 1)
library(dplyr)
library(tidyr)
library(DT)
library(sparkline)
dat <- readRDS("data.rds")
datatable(dat, rownames = FALSE)
dat <- iris3
datatable(dat, rownames = FALSE)
dat <- iris
datatable(dat, rownames = FALSE)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
d1 <- datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
js <- "function(data, type, full){ return '<span class=spark>' + data + '</span>' }"
colDefs1 <- list(list(targets = c(1:3), render = JS(js)))
d1 <- datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
range(filter(dat, Var == "Species")$Val)
dat
r <- range(filter(dat, Species == "setosa")$Val)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
r <- range(filter(dat, Species == "setosa")$Val)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
range(filter(dat, Species == "setosa")$Val)
filter(dat, Species == "setosa")
range(dat$Petal.Length)
r <- range(dat$Petal.Length)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
datatable(dat_t1, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
datatable(dat, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
r <- range(dat$Petal.Length)
x <- "function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { "
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line <- JS(paste0(x, line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ",
r[2], " }); }"), collapse = "")
d1 <- datatable(dat, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
d1
4*12000
4200*12
80000/12
400000/12
300000/12
40000/12
3512-79.98
3432.02-50
9200+3300
12500+500
13000+1700
14700*3.7
54390+45000
4000000/12
333333.3 + 2550000
6000000/12
2883333+50000
34000/12
2550000 + 500000
2883333+500000
271431.74/12
495000/12
81545/12
550000/12
450000/12
29221+7500
450000/12
7500 + 450000/12
7500*12 + 450000
7500*12 + 495000
7500*12 + 500000
29221+7500
7500*12
495000 + 90000
450000/12
37500 + 7500
29221 + 7500
550000/12
35200+7500
7500*12
29221*12
7500*12
44+12
44+13
57/12
4.75*3.7
100000/12
40/2500
450000 + 10000 + 90000
550000/12
55000 + 90000 + 10000
550000 + 90000 + 10000
650000/12
45833.33*0.55
16500*10+50000
19000*12
13700*10+19000+32000
188000/12
15666.67/3.6
3400*3.6
261/7
sqrt(64)
64^(1/3)
64^(1/4)
64^(1/5)
128^(1/5)
256^(1/5)
512^(1/5)
1024^(1/5)
200*30
200*25
200*20
60/3.8
sqrt(572)
572^(1/3)
572^(2/3)
2*1.5
3*1.5
4.5*1.5
6.75*1.5
40*0.75
30*0.75
22.5*0.75
16.875*0.75
10.15/2
4 + 5 + 19
8*5
4 + 7 + 9 + 9 + 10
6 + 32
270 + 142 + 192 +62
33.99+69.99+24.99
pd1 <- rlnorm(100,1,1)
hist(pd1)
pd1 <- rlnorm(1000,1,1)
hist(pd1)
pd1 <- rlnorm(1000,1,2)
hist(pd1)
pd1 <- rlnorm(1000,1,0.5)
hist(pd1)
pd1 <- rlnorm(1e4,1,0.5)
hist(pd1)
pd1 <- rlnorm(1e4,1,1)
hist(pd1)
pd1 <- rlnorm(1e4,1,1)
pd2 <- rlnorm(1e4,1.05,1)
pd3 <- rlnorm(1e4,1.1,1)
pd4 <- rlnorm(1e4,1,0.8)
pd5 <- rlnorm(1e4,1,1)
hist(pd3)
hist(pd5)
hist(pd1+pd2+pd3+pd4+pd5)
pd1 <- rlnorm(1e4,1,1)
pd2 <- rlnorm(1e4,1.05,1)
pd3 <- rlnorm(1e4,1.1,1)
pd4 <- rlnorm(1e4,1,0.8)
pd5 <- rlnorm(1e4,1,1)
pd6 <- rlnorm(1e4,1,1)
pd7 <- rlnorm(1e4,1.05,1)
pd8 <- rlnorm(1e4,1.1,1)
pd9 <- rlnorm(1e4,1,0.8)
pd10 <- rlnorm(1e4,1,1)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9+pd10)
par(mfrow=c(5,5))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd9)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9)
par(mfrow=c(5,5))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd9)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9)
par(mfrow=c(4,3))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd9)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9)
par(mfrow=c(3,4))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd9)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9)
pd1 <- rlnorm(1e4,1,1)
pd2 <- rlnorm(1e4,1.05,1)
pd3 <- rlnorm(1e4,1.1,1)
pd4 <- rlnorm(1e4,1,0.8)
pd5 <- rlnorm(1e4,1,1)
pd6 <- rlnorm(1e4,1,1)
pd7 <- rlnorm(1e4,1.05,1)
pd8 <- rlnorm(1e4,1.2,1)
pd9 <- rlnorm(1e4,1.3,0.8)
par(mfrow=c(3,4))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd9)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8+pd9)
par(mfrow=c(3,4))
hist(pd1)
hist(pd2)
hist(pd3)
hist(pd4)
hist(pd5)
hist(pd6)
hist(pd7)
hist(pd8)
hist(pd1+pd2+pd3+pd4+pd5+pd6+pd7+pd8)
9300+3100+700
13100*3.92
51352+47000
setwd("~/Documents/GitHub/Medical_stat/Papers_scripts")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
require(ggpubr)
# Auxiliar function to randomly select a given column
# Data-processing
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
write.csv(preg,"Pregnancy.csv",row.names = F)
setwd("~/Documents/GitHub/Medical_stat/Papers_scripts")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
require(kernlab)
require(directlabels)
require(MLmetrics)
# Auxiliar function to randomly select a given column
# Data-processing
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- preg[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("PREGNANT_NUMERIC",
#           "LIGATION_GROUP",
"AGE", "TL_rand", "ANAS_rand","Fibr_rand",
"Diam_rand")) %>%
mutate(Fibr_rand = recode(Fibr_rand, "0" = "None",
"1" = "Mild",
"2" = "Moderate",
"3" = "Severe")) %>%
mutate(Fibr_rand = as.factor(Fibr_rand)) %>%
mutate(Fibr_rand = factor(Fibr_rand,levels=c("None","Mild","Moderate","Severe"))) %>%
mutate(ANAS_rand = recode(ANAS_rand, "0" = "Identical",
"1" = "1-SPD",
"2" = "2-SPD",
"3" = "3-SPD")) %>%
mutate(ANAS_rand = factor(ANAS_rand,levels=c("Identical","1-SPD","2-SPD","3-SPD")))  %>%
mutate(Diam_rand = recode(Diam_rand, "1" = "Similar","2" = "Somewhat dissimilar","3" = "Dissimilar")) %>%
mutate(Diam_rand = factor(Diam_rand,levels=c("Similar","Somewhat dissimilar","Dissimilar")))
colnames(preg2) <- c("PREGNANT_NUMERIC", "Age", "Length","Location","Fibrosis",
"Diameter")
write.csv(preg2,"Pregnancy.csv",row.names = F)
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(caret)
library(pROC)
require(reshape)
require(randomForest)
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
require(VGAM)
# Auxiliar function to randomly select a given column
outcomes <- read.csv("BTA-Pregnancies-anonymized.csv") %>% select(c("OutcomeGpNumeric",
"LIGATION_GROUP",
"AGE",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(outcomes),1,0.5) + 1
temp1 <- outcomes[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- outcomes[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- outcomes[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- outcomes[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- outcomes[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- outcomes[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(outcomes)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
outcomes2 <- outcomes %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(OutcomeGpNumeric = as.factor(OutcomeGpNumeric)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("OutcomeGpNumeric",
#"LIGATION_GROUP",
"AGE", "TL_rand","ANAS_rand","Fibr_rand",
"Diam_rand")) %>%
mutate(Fibr_rand = recode(Fibr_rand, "0" = "None",
"1" = "Mild",
"2" = "Moderate",
"3" = "Severe")) %>%
mutate(Fibr_rand = as.factor(Fibr_rand)) %>%
mutate(Fibr_rand = factor(Fibr_rand,levels=c("None","Mild","Moderate","Severe"))) %>%
mutate(ANAS_rand = recode(ANAS_rand, "0" = "Identical",
"1" = "1-SPD",
"2" = "2-SPD",
"3" = "3-SPD")) %>%
mutate(ANAS_rand = factor(ANAS_rand,levels=c("Identical","1-SPD","2-SPD","3-SPD")))  %>%
mutate(Diam_rand = recode(Diam_rand, "1" = "Similar","2" = "Somewhat dissimilar","3" = "Dissimilar")) %>%
mutate(Diam_rand = factor(Diam_rand,levels=c("Similar","Somewhat dissimilar","Dissimilar")))
#colnames(outcomes2) <- c("OutcomeGpNumeric","Sterilization_Method", "Age", "Length","Location","Fibrosis",
#                     "Diameter")
colnames(outcomes2) <- c("OutcomeGpNumeric", "Age", "Length","Location","Fibrosis",
"Diameter")
write.csv(outcomes2,"Outcomes.csv",row.names = F)
outcomes2$OutcomeGpNumeric
table(outcomes2[,c("Location","OutcomeGpNumeric")])
outcomes3 <- outcomes2 %>%
mutate(OutcomeGpNumeric = factor(OutcomeGpNumeric,
levels=c("Birth","Ongoing","Miscarriage","Ectopic")))
write.csv(outcomes3,"Outcomes.csv",row.names = F)
outcomes2$OutcomeGpNumeric
outcomes3 <- outcomes2 %>%
mutate(OutcomeGpNumeric = recode(OutcomeGpNumeric,
"1"="Birth","2"="Ongoing","3" = "Miscarriage",
"4" = "Ectopic"))
write.csv(outcomes3,"Outcomes.csv",row.names = F)
