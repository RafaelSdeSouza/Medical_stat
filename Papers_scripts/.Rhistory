preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- preg[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("PREGNANT_NUMERIC",
#           "LIGATION_GROUP",
"AGE", "TL_rand", "ANAS_rand","Fibr_rand",
"Diam_rand")) %>%
mutate(Fibr_rand = recode(Fibr_rand, "0" = "None",
"1" = "Mild",
"2" = "Moderate",
"3" = "Severe")) %>%
mutate(Fibr_rand = as.factor(Fibr_rand)) %>%
mutate(Fibr_rand = factor(Fibr_rand,levels=c("None","Mild","Moderate","Severe"))) %>%
mutate(ANAS_rand = recode(ANAS_rand, "0" = "Identical",
"1" = "1-SPD",
"2" = "2-SPD",
"3" = "3-SPD")) %>%
mutate(ANAS_rand = factor(ANAS_rand,levels=c("Identical","1-SPD","2-SPD","3-SPD")))  %>%
mutate(Diam_rand = recode(Diam_rand, "1" = "Similar","2" = "Somewhat dissimilar","3" = "Dissimilar")) %>%
mutate(Diam_rand = factor(Diam_rand,levels=c("Similar","Somewhat dissimilar","Dissimilar")))
colnames(preg2) <- c("PREGNANT_NUMERIC", "Age", "Length","Location","Fibrosis",
"Diameter")
# Split train vs test sample
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .95,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- preg2[-trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
# Train the models: GLM, GAM, RF
classif_gam <- gam(PREGNANT_NUMERIC~
#LIGATION_GROUP
s(Age,bs="cr",k=12)+s(Length,bs="cr",k=12) +  Location + Fibrosis + Diameter, data = Train,
family=binomial(link = "logit"))
p_gam  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Test$PREGNANT_NUMERIC))
explain_gam  <- explain(classif_gam, label = "GAM",
data = Test[,-1], y = yTest,
predict_function = p_gam)
loss_entropy <- function(y, p){
y <- as.numeric(y)
-(1/length(y))*sum((y*log(p) + (1-y)*log(1-p))
)
}
y_true = as.numeric(Train[,1])-1
vi_gam <- variable_importance(explain_gam,  n_sample = -1,loss_function = loss_entropy,type = "difference")
plot(vi_gam)
explain_gam  <- explain(classif_gam, label = "Pregnancy",
data = Test[,-1], y = yTest,
predict_function = p_gam)
vi_gam <- variable_importance(explain_gam,  n_sample = -1,loss_function = loss_entropy,type = "difference")
plot(vi_gam)
pdf("VIR_PregnancyLik.pdf",height = 4.5,width = 5.5)
plot(vi_gam,height = 3.5,width = 4)
dev.off()
plot(vi_gam,height = 3.5,width = 4)
pdf("VIR_PregnancyLik.pdf",height = 3.5,width = 4)
plot(vi_gam)
dev.off()
setwd("~/Documents/GitHub/Medical_stat/Papers_scripts")
# Pregnancy data
require(dplyr)
require(magrittr)
require(mgcv)
require(visreg)
require(caret)
library(pROC)
library(lime)
require(reshape)
require(corrplot)
require(randomForest)
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)      # ML model building
library(h2o)        # ML model building
require(xgboost)
require(DALEX)
source("my_style.R")
require(ggthemes)
require(kernlab)
require(forcats)
require(kernlab)
require(directlabels)
require(MLmetrics)
# Auxiliar function to randomly select a given column
# Data-processing
preg <- read.csv("BTA-Patients-MAW.csv") %>% select(c("PREGNANT_NUMERIC",  "AGE",
"LIGATION_GROUP",
"TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL",
"LEFT_TUBE_LENGTH",     "RIGHT_TUBE_LENGTH",
"TUBELENGTH_L_PROX",    "TUBELENGTH_R_PROX",
"L_DIAMETER_NUMERIC","R_DIAMETER_NUMERIC",
"L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC",
"L_FIBROSIS_NUMERIC",   "R_FIBROSIS_NUMERIC",
"ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC"
)) %>%
filter(AGE != "Yes") %>%  mutate(AGE = as.numeric(as.character(AGE)) )  %>%
filter(AGE > 10) %>%
na.omit() %>% mutate(LEFT_TUBE_LENGTH = as.numeric(as.character(LEFT_TUBE_LENGTH)) ) %>%
mutate(TUBELENGTH_L_DISTAL = as.numeric(as.character(TUBELENGTH_L_DISTAL)) ) %>%
filter(PREGNANT_NUMERIC %in% c(0,1)) %>%
mutate(PREGNANT_NUMERIC = as.numeric(as.character(PREGNANT_NUMERIC))) %>%
droplevels()
# Sort left or right for each woman via bernoulli process
set.seed(42)
rlist <- rbinom(nrow(preg),1,0.5) + 1
temp1 <- preg[,c("LEFT_TUBE_LENGTH","RIGHT_TUBE_LENGTH")]
temp2 <- preg[,c( "TUBELENGTH_L_DISTAL",  "TUBELENGTH_R_DISTAL")]
temp3 <- preg[,c("TUBELENGTH_L_PROX", "TUBELENGTH_R_PROX")]
temp4 <- preg[,c("ANASTOMOSIS2_NUMERIC","ANASTOMOSIS1_NUMERIC")]
temp5 <- preg[,c("L_FIBROSIS_NUMERIC","R_FIBROSIS_NUMERIC")]
temp6 <- preg[,c("L_DIAMETER_NUMERIC",   "R_DIAMETER_NUMERIC")]
TL_rand <- c()
TLD_rand <- c()
TLP_rand <- c()
ANAS_rand <- c()
Fibr_rand <- c()
Diam_rand <- c()
for (i in 1:nrow(preg)) {
TL_rand <-  append(TL_rand,temp1[i,rlist[i]])
TLD_rand <- append(TLD_rand,temp2[i,rlist[i]])
TLP_rand <- append(TLP_rand,temp3[i,rlist[i]])
ANAS_rand <- append(ANAS_rand,temp4[i,rlist[i]])
Fibr_rand <- append(Fibr_rand,temp5[i,rlist[i]])
Diam_rand <- append(Diam_rand,temp6[i,rlist[i]])
}
# Create new dataset with choosen features
preg2 <- preg %>%
mutate(TL_rand = TL_rand) %>%
mutate(TLD_rand = TLD_rand) %>%
mutate(TLP_rand = TLP_rand) %>%
mutate(ANAS_rand = ANAS_rand) %>%
mutate(Fibr_rand = Fibr_rand) %>%
mutate(PREGNANT_NUMERIC = as.factor(PREGNANT_NUMERIC)) %>%
mutate(Diam_rand  = Diam_rand) %>%
select(c("PREGNANT_NUMERIC",
#           "LIGATION_GROUP",
"AGE", "TL_rand", "ANAS_rand","Fibr_rand",
"Diam_rand")) %>%
mutate(Fibr_rand = recode(Fibr_rand, "0" = "None",
"1" = "Mild",
"2" = "Moderate",
"3" = "Severe")) %>%
mutate(Fibr_rand = as.factor(Fibr_rand)) %>%
mutate(Fibr_rand = factor(Fibr_rand,levels=c("None","Mild","Moderate","Severe"))) %>%
mutate(ANAS_rand = recode(ANAS_rand, "0" = "Identical",
"1" = "1-SPD",
"2" = "2-SPD",
"3" = "3-SPD")) %>%
mutate(ANAS_rand = factor(ANAS_rand,levels=c("Identical","1-SPD","2-SPD","3-SPD")))  %>%
mutate(Diam_rand = recode(Diam_rand, "1" = "Similar","2" = "Somewhat dissimilar","3" = "Dissimilar")) %>%
mutate(Diam_rand = factor(Diam_rand,levels=c("Similar","Somewhat dissimilar","Dissimilar")))
colnames(preg2) <- c("PREGNANT_NUMERIC", "Age", "Length","Location","Fibrosis",
"Diameter")
# Split train vs test sample
trainIndex <- createDataPartition(preg2$PREGNANT_NUMERIC, p = .95,
list = FALSE,
times = 1)
Train <- preg2[trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
Test  <- preg2[-trainIndex,]
#%>% mutate(LIGATION_GROUP = as.numeric(LIGATION_GROUP))
classif_gam <- gam(PREGNANT_NUMERIC~
#LIGATION_GROUP
s(Age,bs="cr",k=12)+s(Length,bs="cr",k=12) +  Location + Fibrosis + Diameter, data = Train,
family=binomial(link = "logit"))
p_gam  <- function(object, newdata){predict(object, newdata=newdata, type="response")}
yTest <- as.numeric(as.character(Train$PREGNANT_NUMERIC))
explain_gam  <- explain(classif_gam, label = "Pregnancy",
data = Train[,-1], y = yTest,
predict_function = p_gam)
loss_entropy <- function(y, p){
y <- as.numeric(y)
-(1/length(y))*sum((y*log(p) + (1-y)*log(1-p))
)
}
vi_gam <- variable_importance(explain_gam,  n_sample = -1,loss_function = loss_entropy,type = "difference")
pdf("VIR_PregnancyLik.pdf",height = 3.5,width = 4)
plot(vi_gam)
dev.off()
BB <- function(x){x[1] + x[2]}
BB(1,4)
BB(c(1,4))
BB <- function(x){x[1] + x[2]^2}
BB(c(1,4))
BB <- function(par){
val1 <- 1e-1*par(1)^4.0 +
2e-1*par(2)^3.0 +
7e-1*par(3)^2.0 +
4e-1*par(4);
val2 <- 3e-2*par(1)^4.0 +
5e-2*par(2)^3.0 +
9e-2*par(3)^2.0 +
1e-2*par(4);
val3 <- 7e-3*par(1)^4.0 +
1e-3*par(2)^3.0 +
4e-3*par(3)^2.0 +
2e-3*par(4);
val4 <- 2e-4*par(1)^4.0 +
5e-4*par(2)^3.0 +
8e-4*par(3)^2.0 +
8e-4*par(4);
val5 <- 9e-5*par(1)^4.0 +
6e-5*par(2)^3.0 +
3e-4*par(3)^2.0 +
1e-4*par(4)
return(c(val1,val2,val3,val4,val5))
}
BB(c(1,4,3,2,7,))
BB(c(1,4,3,2))
BB <- function(par){
val1 <- 1e-1*par[1]^4.0 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2.0 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2.0 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4.0 +
5e-4*par[2]^3.0 +
8e-4*par[3]^2.0 +
8e-4*par[4];
val5 <- 9e-5*par[1]^4.0 +
6e-5*par[2]^3.0 +
3e-4*par[3]^2.0 +
1e-4*par[4]
return(c(val1,val2,val3,val4,val5))
}
BB(c(1,4,3,2))
library(EasyABC)
install.packages("EasyABC")
require(EasyABC)
# Toy programm
# ======================================================================
#   COMPUTE PREDICTED VALUES: BLACK BOX
# ======================================================================
#     the numbers in the following equations are "hidden"
data <- c(34,12,456,78)
summarydata <- data
model <- function(par){
val1 <- 1e-1*par[1]^4.0 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2.0 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2.0 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4.0 +
5e-4*par[2]^3.0 +
8e-4*par[3]^2.0 +
8e-4*par[4];
val5 <- 9e-5*par[1]^4.0 +
6e-5*par[2]^3.0 +
3e-4*par[3]^2.0 +
1e-4*par[4]
return(c(val1,val2,val3,val4,val5))
}
ABC_Marjoram_original<-ABC_mcmc(method="Marjoram", model=model,
prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
summary_stat_target=summarydata, n_rec = 10000)
data <- model(c(34,12,456,78))
summarydata <- data
summarydata
model <- function(par){
val1 <- 1e-1*par[1]^4.0 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2.0 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2.0 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4.0 +
5e-4*par[2]^3.0 +
8e-4*par[3]^2.0 +
8e-4*par[4];
val5 <- 9e-5*par[1]^4.0 +
6e-5*par[2]^3.0 +
3e-4*par[3]^2.0 +
1e-4*par[4]
return(c(val1,val2,val3,val4,val5))
}
ABC_Marjoram_original<-ABC_mcmc(method="Marjoram", model=model,
prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
summary_stat_target=summarydata, n_rec = 10000)
str(ABC_Marjoram_original)
par(mfrow=c(2,1))
hist(ABC_Marjoram_original$param[5000:10000,1], main = "Posterior for mean")
hist(ABC_Marjoram_original$param[5000:10000,2], main = "Posterior for standard deviation")
ABC_Marjoram_original$param
hist(ABC_Marjoram_original$param[5000:10000,1], main = "Posterior for mean")
hist(ABC_Marjoram_original$param[5000:10000,1], main = "Posterior for mean")
ABC_Marjoram_original<-ABC_mcmc(method="Marjoram", model=model,
prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
summary_stat_target=summarydata, n_rec = 40000)
hist(ABC_Marjoram_original$param[5000:10000,1], main = "Posterior for mean")
hist(ABC_Marjoram_original$param[10000:40000,1], main = "Posterior for mean")
hist(ABC_Marjoram_original$param[30000:40000,1], main = "Posterior for mean")
ABC_Marjoram_original$param
hist(ABC_Marjoram_original$param[,1], main = "Posterior for mean")
plot(ABC_Marjoram_original$param[,1],ABC_Marjoram_original$param[,2])
pdat <- ABC_Marjoram_original$param
as.data.frame(ABC_Marjoram_original$param)
pdat <- as.data.frame(ABC_Marjoram_original$param)
ggplot(data = pdat,aes(x=V1,y=V2)) +
geom_density_2d()
ABC_Marjoram_original<-ABC_mcmc(method="Marjoram", model=model,
prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
summary_stat_target=summarydata, n_rec = 1e5)
pdat <- as.data.frame(ABC_Marjoram_original$param)[50000:1e5,]
ggplot(data = pdat,aes(x = V1,y = V2)) +
geom_density_2d()
ggplot(data = pdat,aes(x = V1,y = V3)) +
geom_density_2d()
ggplot(data = pdat,aes(x = V1,y = V5)) +
geom_density_2d()
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=20, summary_stat_target=summarydata, tolerance_tab=0.5)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=20, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
ABC_Beaumont
ABC_Beaumont <-ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=200, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
pdat <- as.data.frame(ABC_Marjoram_original$param)[50000:1e5,]
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
ABC_Beaumont <-ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=1e4, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=1e3, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
pdat <- as.data.frame(ABC_Beaumont$param)
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=5e3, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
pdat <- as.data.frame(ABC_Beaumont$param)
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
hist(ABC_Beaumont$param[,1])
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=model, prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
nb_simul=1e4, summary_stat_target=summarydata, tolerance_tab=c(1.5,0.5))
hist(ABC_Beaumont$param[,1])
model <- function(par){
val1 <- 1e-1*par[1] +
2e-1*par[2]^2.0 +
7e-1*par[3] +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2.0 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4.0 +
5e-4*par[2]^3.0 +
8e-4*par[3]^2.0 +
8e-4*par[4];
val5 <- 9e-5*par[1]^4.0 +
6e-5*par[2]^3.0 +
3e-4*par[3]^2.0 +
1e-4*par[4]
return(c(val1,val2,val3,val4,val5))
}
data <- model(c(34,12,456,78))
summarydata <- data
ABC_Marjoram_original <- ABC_mcmc(method="Marjoram", model=model,
prior=list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000)),
summary_stat_target=summarydata, n_rec = 1e5)
ABC_Marjoram_original$param[,1]
hist(ABC_Marjoram_original$param[,1])
ABC_Drovandi<-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=200, summary_stat_target=summarydata, tolerance_tab=0.1, c=c_drov=0.7)
ABC_Drovandi<-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=200, summary_stat_target=summarydata, tolerance_tab=0.1, c=0.7)
toy_prior <- list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000))
ABC_Drovandi<-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=200, summary_stat_target=summarydata, tolerance_tab=0.1, c=0.7)
ABC_Drovandi
ABC_Drovandi <-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=2000, summary_stat_target=summarydata, tolerance_tab=1, c=0.7)
ABC_Drovandi$param[,1]
hist(ABC_Drovandi$param[,1])
ABC_Drovandi <-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=2000, summary_stat_target=summarydata, tolerance_tab=5, c=0.7)
hist(ABC_Drovandi$param[,1])
ABC_Drovandi <-ABC_sequential(method="Drovandi", model=model, prior=toy_prior,
nb_simul=5000, summary_stat_target=summarydata, tolerance_tab=0.5, c=0.7)
hist(ABC_Drovandi$param[,1])
require(abc.data)
data(musigma2)
?musigma2
## The rejection algorithm
##
rej <- abc(target=stat.obs, param=par.sim, sumstat=stat.sim, tol=.1, method =
"rejection")
## ABC with local linear regression correction without/with correction
## for heteroscedasticity
##
lin <- abc(target=stat.obs, param=par.sim, sumstat=stat.sim, tol=.1, hcorr =
FALSE, method = "loclinear", transf=c("none","log"))
linhc <- abc(target=stat.obs, param=par.sim, sumstat=stat.sim, tol=.1, method =
"loclinear", transf=c("none","log"))
## posterior summaries
##
linsum <- summary(linhc, intvl = .9)
linsum
## compare with the rejection sampling
summary(linhc, unadj = TRUE, intvl = .9)
## posterior histograms
##
hist(linhc, breaks=30, caption=c(expression(mu),
expression(sigma^2)))
hist(linhc, file="linhc", breaks=30, caption=c(expression(mu),
expression(sigma^2)))
## diagnostic plots: compare the 2 'abc' objects: "loclinear",
## "loclinear" with correction for heteroscedasticity
##
plot(lin, param=par.sim)
## example illustrates how to add "true" parameter values to a plot
##
postmod <- c(post.mu[match(max(post.mu[,2]), post.mu[,2]),1],
post.sigma2[match(max(post.sigma2[,2]), post.sigma2[,2]),1])
plot(linhc, param=par.sim, true=postmod)
## artificial example to show how to use the logit tranformations
##
myp <- data.frame(par1=runif(1000,-1,1),par2=rnorm(1000),par3=runif(1000,0,2))
mys <- myp+rnorm(1000,sd=.1)
myt <- c(0,0,1.5)
lin2 <- abc(target=myt, param=myp, sumstat=mys, tol=.1, method =
"loclinear", transf=c("logit","none","logit"),logit.bounds = rbind(c(-1,
1), c(NA, NA), c(0, 2)))
summary(lin2)
